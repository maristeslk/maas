#!/bin/bash -e
#
# Copyright 2020 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).
#
#
# Helper to migrate the PostgresSQL database from the snap to the host system.
#

# shellcheck source=snap/local/tree/helpers/_lib
. /snap/agora-maas/current/helpers/_lib


snap_postgres_major_version() {
    cat "$MAAS_SNAP_COMMON/postgres/data/PG_VERSION" 2>/dev/null || true
}

ensure_snap_db_used() {
    if [ "$(maas_snap_mode)" != "all" ]; then
        error_exit "PotgreSQL database is not in use in the snap."
    fi
}

setup_postgres() {
    local already_installed
    is_deb_installed postgresql && already_installed=1 || already_installed=0
    if [  "$already_installed" -eq 1 ]; then
        cat <<EOF
PostgreSQL is already installed on this machine.

If you proceed with migration of the MAAS database from the snap, existing
database setup will be replaced.

Current databases will be backed up:
EOF
        for db in $(list_databases); do
            echo "  $db"
        done
        echo
        local answer
        answer=$(ask_yes_no Y "Proceed?")
        [ "$answer" = "y" ] || exit 0
    else
        message_step "Installing the PostgreSQL database server..."
        log_to_file install_postgres
    fi
    ensure_target_postgres_version
}

list_databases() {
    pg_do psql -At -l 2>/dev/null | \
        awk -F\| 'NF > 1 { print $1; }' | \
        grep -v '^\(template[01]\|postgres\)$'
}

install_postgres() {
    apt update -y
    apt install -y postgresql
}

ensure_target_postgres_version() {
    local snap_pg_version deb_pg_version
    snap_pg_version="$(snap_postgres_major_version)"
    deb_pg_version="$(postgres_major_version)"
    if ! is_version "$deb_pg_version" ">=" "$snap_pg_version"; then
        error_exit "\
System PostgreSQL major version ($deb_pg_version) is too old, \
need at least $snap_pg_version"
    fi
}

migrate_db() {
    local deb_pg_version
    deb_pg_version="$(postgres_major_version)"

    local src_datadir="$MAAS_SNAP_COMMON/postgres/data"
    local src_bindir="$MAAS_SNAP/usr/lib/postgresql/10/bin"
    local dst_datadir="/var/lib/postgresql/$deb_pg_version/main"
    local dst_bindir="/usr/lib/postgresql/$deb_pg_version/bin"

    message_step "Migrating database from the snap to the host"
    systemctl stop postgresql.service

    # make original database accessible to the postgres user
    chown -R postgres:postgres "$MAAS_SNAP_COMMON/postgres"

    # backup original database
    local backup_datadir
    backup_datadir=$(backup_name "$dst_datadir")
    mkdir -p "$backup_datadir"
    mv "$dst_datadir" "$backup_datadir"

    # initialize the new database
    log_to_file pg_do "$dst_bindir/initdb" -D "$dst_datadir" -U postgres -E UTF8 --locale=C
    # override original bin dir with one that provides wrappers with correct
    # libraries from the snap
    src_bindir="$(make_snap_pg_bin_wrappers_dir "$src_bindir")"
    log_to_file \
        pg_do \
        "$dst_bindir/pg_upgrade" \
        -U postgres \
        --old-bindir "$src_bindir" \
        --old-datadir "$src_datadir" \
        --new-bindir "$dst_bindir" \
        --new-datadir "$dst_datadir"

    postgres_update_hba
    systemctl start postgresql.service
    rm -rf "$src_bindir" "$src_datadir"
    echo "Previous PostgreSQL databases left in $backup_datadir"
}

make_snap_pg_bin_wrappers_dir() {
    local bindir="$1"
    local dir
    dir="$(mktemp -d)"
    chmod 755 "$dir"

    local library_path
    # shellcheck disable=SC2016
    library_path="$(snap_run 'echo $LD_LIBRARY_PATH')"

    local path target
    while IFS= read -d $'\0' -r target; do
        path="$dir/$(basename "$target")"
        cat >"$path" <<EOF
#!/bin/sh -e
export LD_LIBRARY_PATH="$library_path"
$target "\$@"
EOF
        chmod +x "$path"
    done < <(find "$bindir" -mindepth 1 -print0)
    echo "$dir"
}

update_snap_config() {
    message_step "Updating the snap configuration"
    echo "region+rack" > "$MAAS_SNAP_COMMON/snap_mode"
    sed -i 's/^database_host.*/database_host: localhost/' "$MAAS_SNAP_DATA/regiond.conf"
}

check_root
ensure_snap_db_used
setup_postgres
log_to_file snap stop maas
migrate_db
update_snap_config
log_to_file snap start maas
